package FunctionRotator;

import GNUPlot.GNUPlot;
import java.awt.*;

public final class FunctionRotator
{
    private static Choice plotStyle;
    private static TextField functions[];
    private static TextField axes[];
    
    private static TextField xMin, xMax;
    private static TextField yMin, yMax;
    private static TextField zMin, zMax;

    private static GNUPlot gnuplot;

    private static final int NUMBER_FUNCTIONS = 10;
    private static final String PROGRAM_NAME = "Function Rotator";

    public static void main (final String args[])
    {
	initWindow ();
    }
	
    private void plot ()
    {
    }

    private void rotate ()
    {
    }

    private void viewLog ()
    {
    }

    private GridBagConstraints makeConstraints(final int x,
					       final int y,
					       final int width,
					       final int height)
    {
	final GridBagConstraints c = new GridBagConstraints ();

	c.gridx = x;
	c.gridy = y;
	c.gridwidth = width;
	c.gridheight = height;

	return c;
    }
						

    private static void initWindow ()
    {
	final Frame appWindow = new Frame (PROGRAM_NAME);
	appWindow.addWindowListener (new WindowAdapter ()
	    {
		public void windowClosing (final WindowEvent e)
		{
		    System.exit (0);
		}
	    });

	Button b;
	b = new Button ("Plot");
	b.addActionListener (new ActionListener ()
	    {
		public void actionPerformed (final ActionEvent e)
		{
		    plot ();
		}
	    });
	appWindow.add (b, makeConstraints (0, 0, 3, 1));

	b = new Button ("Rotate");
	b.addActionListener (new ActionListener ()
	    {
		public void actionPerformed (final ActionEvent e)
		{
		    rotate ();
		}
	    });
	appWindow.add (b, makeConstraints (0, 4, 3, 1));


	b = new Button ("View Log");
	b.addActionListener (new ActionListener ()
	    {
		public void actionPerformed (final ActionEvent e)
		{
		    viewLog ();
		}
	    });
	appWindow.add (b, makeConstraints (0, 8, 3, 1));

	// Add x range
	Label l = new Label ("x:");
	appWindow.add (l, makeConstraints (0, 1, 1, 1,));
	
	xMin = new TextField ("-10", 1, 3, TextArea.SCROLLBARS_NONE);
	appWindow.add (xMin, makeConstraints (1, 1, 3, 1));

	l = new Label ("-");
	appWindow.add (l, makeConstraints (4, 1, 1, 1));
		       
	xMax = new TextField ("10", 3);
	appWindow.add (xMax, makeConstraints (5, 1, 3, 1));

	// Add y range
	l = new Label ("y:");
	appWindow.add (l, makeConstraints (9, 1, 1, 1));

	yMin = new TextField ("-10", 3);
	appWindow.add (yMin, makeConstraints (10, 1, 3, 1));

	l = new Label ("-");
	appWindow.add (l, makeConstraints (13, 1, 1, 1));
	
	yMax = new TextField ("10", 3);
	appWindow.add (yMax, makeConstraints (14, 1, 3, 1));

	// Add z range
	l = new Label ("z:");
	appWindow.add (l, makeConstraints (18, 1, 1, 1));

	zMin = new TextField ("-10", 3);
	appWindow.add (zMin, makeConstraints (19, 1, 3, 1));

	l = new Label ("-");
	appWindow.add (l, makeConstraints (22, 1, 1, 1));

	zMax = new TextField ("10", 3);
	appWindow.add (zMax, makeConstraints (23, 1, 3, 1));

	// Style selector
	l = new Label ("Style");
	appWindow.add (l, makeConstraints (0, 2, 2, 1));

	
	plotStyle = new Choice ();
	final String styles[] =
	    {"points", "linespoints", "filledcurves", "lines", "vectors", "pm3d"};
	for (final String style: styles)
	    plotStyle.add (style);

	appWindow.add (l, makeConstraints (2, 2, 3, 1));

	for (int i = 0; i < NUMBER_FUNCTIONS; ++i)
	    {
		l = new Label ("Y" + i "=");
		appWindow.add (l, makeConstraints (0, 3 + i, 3, 1));

		functions[i] = new TextField ("", 10);
		appWindow.add (functions[i], makeConstraints (3, 3 + i, 10, 1));

		l = new Label ("x=");
		appWindow.add (l, makeConstraints (14, 3 + i, 2, 1));

		
		axes[i] = new TextField ("0", 3);
		appWindow.add (axes[i], makeConstraints (16, 3 + i, 3, 1));
	    }

	appWindow.setSize (500, 500);
	appWindow.setVisible (true);
    }
}
